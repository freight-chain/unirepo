---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Besu IBFT2 Template"

Mappings:

  AMIRegionMap:
    us-east-1:
      "HVM64": "ami-00068cd7555f543d5"
    us-east-2:
      "HVM64": "ami-0dacb0c129b49f529"
    us-west-1:
      "HVM64": "ami-0b2d8d1abb76a53d8"
    us-west-2:
      "HVM64": "ami-0c5204531f799e0c6"
    ap-south-1:
      "HVM64": "ami-0ce933e2ae91880d3"
    ap-southeast-1:
      "HVM64": "ami-07539a31f72d244e7"
    ap-southeast-2:
      "HVM64": "ami-0119aa4d67e59007c"
    ap-northeast-1:
      "HVM64": "ami-068a6cefc24c301d2"
    ap-northeast-2:
      "HVM64": "ami-0d59ddf55cdda6e21"
    ca-central-1:
      "HVM64": "ami-0ff24797826ebbcd5"
    sa-east-1:
      "HVM64": "ami-07820a4443539a2b0"
    eu-central-1:
      "HVM64": "ami-0d4c3eabb9e72650a"
    eu-west-1:
      "HVM64": "ami-01f14919ba412de34"
    eu-west-2:
      "HVM64": "ami-05f37c3995fffb4fd"
    eu-west-3:
      "HVM64": "ami-0e9e6ba6d3d38faa8"
    eu-north-1:
      "HVM64": "ami-006cda581cf39451b"

Parameters:

  VpcId:
    Description: The Vpc ID to deploy the instance into
    Type: String

  VpcCidrRange:
    Default: 10.0.0.0/16
    Description: The CIDR range or IP of the VPC
    Type: String

  SubnetOneId:
    Description: The Subnet ID of the VPC to deploy the instance into, generally this is in a public subnet
    Type: String

  SubnetTwoId:
    Description: The Subnet ID of the VPC to deploy the instance into, generally this is in a public subnet
    Type: String

  PublicCidrRange:
    Default: 0.0.0.0/0
    Description: The CIDR range or IP that is allowed to access the instances
    Type: String

  BesuNodeInstanceType:
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t3.medium
      - t3.large
      - t3.xlarge
    Default: t3.medium
    Description: The EC2 instance type
    Type: String

  Ec2KeyPair:
    Default: yeti-syd
    Description: The ssh key pair to use with the EC2 instance
    Type: String

  BesuVersion:
    Default: 1.3.8
    Description: The version of Besu to install
    Type: String

  BootnodeValidatorPublicKey:
    Default: "0x...."
    Description: The public key of the bootnode. The bootnode is also validator1
    Type: String

  BootnodeValidatorPrivateKey:
    Default: "0x...."
    Description: The private key of the bootnode. The bootnode is also validator1
    Type: String

  Validator2PrivateKey:
    Default: "0x...."
    Description: The private key of validator2
    Type: String

  Validator3PrivateKey:
    Default: "0x...."
    Description: The private key of validator2
    Type: String

  Validator4PrivateKey:
    Default: "0x...."
    Description: The private key of validator2
    Type: String

  GenesisFile:
    Default: "{}"
    Description: The genesisfile
    Type: String

Resources:

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: !Ref PublicCidrRange
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sg-public"

  EthSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCidrRange
          FromPort: 8545
          IpProtocol: tcp
          ToPort: 8545
        - CidrIp: !Ref VpcCidrRange
          FromPort: 8546
          IpProtocol: tcp
          ToPort: 8546
        - CidrIp: !Ref VpcCidrRange
          FromPort: 8547
          IpProtocol: tcp
          ToPort: 8547
        - CidrIp: !Ref VpcCidrRange
          FromPort: 9545
          IpProtocol: tcp
          ToPort: 9545
        - CidrIp: !Ref VpcCidrRange
          FromPort: 30303
          IpProtocol: tcp
          ToPort: 30303
        - CidrIp: !Ref VpcCidrRange
          FromPort: 30303
          IpProtocol: udp
          ToPort: 30303
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sg-eth"

  BootNode:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - cfn-hup
            - data-volume-init
            - besu-setup
            - bootstrap
        cfn-hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              group: root
              owner: root
              mode: "000400"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ConsulLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BootNode --region ${AWS::Region}
                runas=root
              group: root
              owner: root
              mode: "000400"
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
              group: root
              owner: root
              mode: "000400"
          commands:
            01_enable_cfn-hup:
              command: "systemctl enable cfn-hup.service"
            02_start_cfn-hup:
              command: "systemctl start cfn-hup.service"
        data-volume-init:
          commands:
            01_data-volume-filesystem:
              command: |
                #!/bin/bash
                device=$(lsblk | grep 100G | grep -o "^\w*\b")
                # check that it doesnt have a fs before wiping i.e if its healing and recovers with an existing volume leave it as is
                fs_check=$(file -s /dev/$device)
                if [[ $fs_check == *"ext4 filesystem"* ]]; then
                  echo "Existing filesystem... "
                else
                  echo "No filesystem found, creating one..."
                  mkfs.ext4 /dev/$device && e2fsck -f /dev/$device && resize2fs /dev/$device
                fi
                mkdir /data && chown -R ec2-user:ec2-user /data
                UUID=$(blkid /dev/$device | grep -oP '(UUID=).*(?=TYPE)' | sed -e 's/"//g')
                echo "$UUID      /data   ext4    defaults,nofail  0  2" >> /etc/fstab
                mount -a
                chown -R ec2-user:ec2-user /data && chmod -R 777 /data
                mkdir -p /etc/besu/keys/ /home/ec2-user/setup/
                chown -R ec2-user:ec2-user /data /etc/besu/keys/ /home/ec2-user/setup/
              cwd: /
        besu-setup:
          files:
            /etc/besu/genesis.json:
              content: !Sub
                - |
                  ${genesisFile}
                - genesisFile:
                    !Ref GenesisFile
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/keys/key:
              content: !Sub
                - |
                  ${bootnodePrivateKey}
                - bootnodePrivateKey:
                    !Ref BootnodeValidatorPrivateKey
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/keys/bootnode_key.pub:
              content: !Sub
                - |
                  ${bootnodePublicKey}
                - bootnodePublicKey:
                    !Ref BootnodeValidatorPublicKey
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/keys/genesis:
              content: !Sub
                - |
                  ${genesis}
                - genesis:
                    !Ref GenesisFile
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/requirements.txt:
              content:
                !Sub |
                ansible==2.8.1
                boto3==1.9.178
                boto==2.49.0
                botocore==1.12.178
                jinja2==2.10.1
                pyyaml==5.1.1
                requests==2.22.0
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/requirements.yml:
              content:
                !Sub |
                ---
                - src: pegasyseng.hyperledger_besu
                - src: undergreen.prometheus-node-exporter
                - src: undergreen.prometheus-exporters-common
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/besu.yml:
              content: !Sub
                - |
                  ---
                  - hosts: localhost
                    connection: local
                    force_handlers: True

                    roles:
                      - role: pegasyseng.hyperledger_besu
                        vars:
                          besu_version: "${besuVersion}"
                          besu_network: ibft
                          besu_rpc_http_api: ["DEBUG","NET","WEB3","ETH","ADMIN","IBFT"]
                          besu_node_private_key_file: /etc/besu/keys/key
                          besu_genesis_path: /etc/besu/genesis.json
                          besu_bootnodes: ["enode://PARAM_BESU_BOOTNODE_PUBKEY@PARAM_BESU_BOOTNODE_IP:30303"]
                          besu_host_ip: PARAM_BESU_BOOTNODE_IP

                      # The undergreen.prometheus-exporters-common uses 'package' for some tasks which call 'yum' which is not available to the python3 runtime.
                      # This sets the interpreter to use python2.7 for this task to install dependencies and in turn the node exporter to get instance metrics
                      - role: undergreen.prometheus-node-exporter
                        vars:
                          ansible_python_interpreter: /usr/bin/python
                        become: yes

                - besuVersion:
                    !Ref BesuVersion
              owner: ec2-user
              group: ec2-user
              mode: '000644'
        bootstrap:
          commands:
            01_bootstrap-init:
              command: |
                #!/bin/bash
                # remove any chars at the end of the private key
                echo -ne `cat /home/ec2-user/setup/keys/key` > /etc/besu/keys/key
                BESU_BOOTNODE_PUBKEY=`cat /home/ec2-user/setup/keys/bootnode_key.pub`
                BESU_NODE_IP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`
                sed -i "s/PARAM_BESU_BOOTNODE_IP/$BESU_NODE_IP/g" /home/ec2-user/setup/besu.yml
                sed -i "s/PARAM_BESU_BOOTNODE_PUBKEY/${BESU_BOOTNODE_PUBKEY//0x}/g" /home/ec2-user/setup/besu.yml
              cwd: /home/ec2-user/setup
    Properties:
      ImageId: !FindInMap [ AMIRegionMap, !Ref 'AWS::Region' , HVM64 ]
      KeyName: !Ref Ec2KeyPair
      InstanceType: !Ref BesuNodeInstanceType
      EbsOptimized: true
      SubnetId: !Ref SubnetOneId
      SecurityGroupIds:
      - !Ref PublicSecurityGroup
      - !Ref EthSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 20
      - DeviceName: /dev/xvdf
        Ebs:
          VolumeSize: 100
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BootNode --configsets default --region ${AWS::Region}

            yum update -y --security --exclude=kernel*
            yum install -y docker wget curl ntp bind-utils iproute libselinux-python jq python3-pip python3-setuptools
            amazon-linux-extras install -y java-openjdk11

            cd /home/ec2-user/setup/
            python3 -m venv env
            source env/bin/activate
            python3 -m pip install --requirement requirements.txt
            ansible-galaxy install --force --role-file requirements.yml
            ansible-playbook -v besu.yml
            deactivate
            cd /home/ec2-user/
            echo "finished setting up besu bootnode ..."
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BootNode --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "besu-${AWS::StackName}-bootnode"

  Validator2Node:
    Type: AWS::EC2::Instance
    DependsOn:
      - BootNode
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - cfn-hup
            - data-volume-init
            - besu-setup
            - bootstrap
        cfn-hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              group: root
              owner: root
              mode: "000400"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ConsulLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Validator2Node --region ${AWS::Region}
                runas=root
              group: root
              owner: root
              mode: "000400"
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
              group: root
              owner: root
              mode: "000400"
          commands:
            01_enable_cfn-hup:
              command: "systemctl enable cfn-hup.service"
            02_start_cfn-hup:
              command: "systemctl start cfn-hup.service"
        data-volume-init:
          commands:
            01_data-volume-filesystem:
              command: |
                #!/bin/bash
                device=$(lsblk | grep 100G | grep -o "^\w*\b")
                # check that it doesnt have a fs before wiping i.e if its healing and recovers with an existing volume leave it as is
                fs_check=$(file -s /dev/$device)
                if [[ $fs_check == *"ext4 filesystem"* ]]; then
                  echo "Existing filesystem... "
                else
                  echo "No filesystem found, creating one..."
                  mkfs.ext4 /dev/$device && e2fsck -f /dev/$device && resize2fs /dev/$device
                fi
                mkdir /data && chown -R ec2-user:ec2-user /data
                UUID=$(blkid /dev/$device | grep -oP '(UUID=).*(?=TYPE)' | sed -e 's/"//g')
                echo "$UUID      /data   ext4    defaults,nofail  0  2" >> /etc/fstab
                mount -a
                chown -R ec2-user:ec2-user /data && chmod -R 777 /data
                mkdir -p /etc/besu/keys/ /home/ec2-user/setup/
                chown -R ec2-user:ec2-user /data /etc/besu/keys/ /home/ec2-user/setup/
              cwd: /
        besu-setup:
          files:
            /etc/besu/genesis.json:
              content: !Sub
                - |
                  ${genesisFile}
                - genesisFile:
                    !Ref GenesisFile
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/keys/key:
              content: !Sub
                - |
                  ${validator2PrivateKey}
                - validator2PrivateKey:
                    !Ref Validator2PrivateKey
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/keys/bootnode_key.pub:
              content: !Sub
                - |
                  ${bootnodePublicKey}
                - bootnodePublicKey:
                    !Ref BootnodeValidatorPublicKey
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/requirements.txt:
              content:
                !Sub |
                ansible==2.8.1
                boto3==1.9.178
                boto==2.49.0
                botocore==1.12.178
                jinja2==2.10.1
                pyyaml==5.1.1
                requests==2.22.0
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/requirements.yml:
              content:
                !Sub |
                ---
                - src: pegasyseng.hyperledger_besu
                - src: undergreen.prometheus-node-exporter
                - src: undergreen.prometheus-exporters-common
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/besu.yml:
              content: !Sub
                - |
                  ---
                  - hosts: localhost
                    connection: local
                    force_handlers: True

                    roles:
                      - role: pegasyseng.hyperledger_besu
                        vars:
                          besu_version: "${besuVersion}"
                          besu_network: ibft
                          besu_rpc_http_api: ["DEBUG","NET","WEB3","ETH","ADMIN","IBFT"]
                          besu_node_private_key_file: /etc/besu/keys/key
                          besu_genesis_path: /etc/besu/genesis.json
                          besu_bootnodes: ["enode://PARAM_BESU_BOOTNODE_PUBKEY@PARAM_BESU_BOOTNODE_IP:30303"]
                          besu_host_ip: PARAM_BESU_NODE_IP

                      # The undergreen.prometheus-exporters-common uses 'package' for some tasks which call 'yum' which is not available to the python3 runtime.
                      # This sets the interpreter to use python2.7 for this task to install dependencies and in turn the node exporter to get instance metrics
                      - role: undergreen.prometheus-node-exporter
                        vars:
                          ansible_python_interpreter: /usr/bin/python
                        become: yes

                - besuVersion:
                    !Ref BesuVersion
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/bootnode_ip.txt:
              content: !Sub
                - |
                  ${bootNodeIp}
                - bootNodeIp:
                    !GetAtt BootNode.PrivateIp
              owner: ec2-user
              group: ec2-user
              mode: '000644'
        bootstrap:
          commands:
            01_bootstrap-init:
              command: |
                #!/bin/bash
                # remove any chars at the end of the private key
                echo -ne `cat /home/ec2-user/setup/keys/key` > /etc/besu/keys/key
                BESU_BOOTNODE_PUBKEY=`cat /home/ec2-user/setup/keys/bootnode_key.pub`
                BESU_BOOTNODE_IP=`cat /home/ec2-user/setup/bootnode_ip.txt`
                BESU_NODE_IP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`
                sed -i "s/PARAM_BESU_NODE_IP/$BESU_NODE_IP/g" /home/ec2-user/setup/besu.yml
                sed -i "s/PARAM_BESU_BOOTNODE_IP/$BESU_BOOTNODE_IP/g" /home/ec2-user/setup/besu.yml
                sed -i "s/PARAM_BESU_BOOTNODE_PUBKEY/${BESU_BOOTNODE_PUBKEY//0x}/g" /home/ec2-user/setup/besu.yml
              cwd: /home/ec2-user/setup
    Properties:
      ImageId: !FindInMap [ AMIRegionMap, !Ref 'AWS::Region' , HVM64 ]
      KeyName: !Ref Ec2KeyPair
      InstanceType: !Ref BesuNodeInstanceType
      EbsOptimized: true
      SubnetId: !Ref SubnetTwoId
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
        - !Ref EthSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: 100
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Validator2Node --configsets default --region ${AWS::Region}

          yum update -y --security --exclude=kernel*
          yum install -y docker wget curl ntp bind-utils iproute libselinux-python jq python3-pip python3-setuptools
          amazon-linux-extras install -y java-openjdk11

          cd /home/ec2-user/setup/
          python3 -m venv env
          source env/bin/activate
          python3 -m pip install --requirement requirements.txt
          ansible-galaxy install --force --role-file requirements.yml
          ansible-playbook -v besu.yml
          deactivate
          cd /home/ec2-user/
          echo "finished setting up besu validator2 ..."
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Validator2Node --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "besu-${AWS::StackName}-validator2"

  Validator3Node:
    Type: AWS::EC2::Instance
    DependsOn:
      - BootNode
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - cfn-hup
            - data-volume-init
            - besu-setup
            - bootstrap
        cfn-hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              group: root
              owner: root
              mode: "000400"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ConsulLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Validator3Node --region ${AWS::Region}
                runas=root
              group: root
              owner: root
              mode: "000400"
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
              group: root
              owner: root
              mode: "000400"
          commands:
            01_enable_cfn-hup:
              command: "systemctl enable cfn-hup.service"
            02_start_cfn-hup:
              command: "systemctl start cfn-hup.service"
        data-volume-init:
          commands:
            01_data-volume-filesystem:
              command: |
                #!/bin/bash
                device=$(lsblk | grep 100G | grep -o "^\w*\b")
                # check that it doesnt have a fs before wiping i.e if its healing and recovers with an existing volume leave it as is
                fs_check=$(file -s /dev/$device)
                if [[ $fs_check == *"ext4 filesystem"* ]]; then
                  echo "Existing filesystem... "
                else
                  echo "No filesystem found, creating one..."
                  mkfs.ext4 /dev/$device && e2fsck -f /dev/$device && resize2fs /dev/$device
                fi
                mkdir /data && chown -R ec2-user:ec2-user /data
                UUID=$(blkid /dev/$device | grep -oP '(UUID=).*(?=TYPE)' | sed -e 's/"//g')
                echo "$UUID      /data   ext4    defaults,nofail  0  2" >> /etc/fstab
                mount -a
                chown -R ec2-user:ec2-user /data && chmod -R 777 /data
                mkdir -p /etc/besu/keys/ /home/ec2-user/setup/
                chown -R ec2-user:ec2-user /data /etc/besu/keys/ /home/ec2-user/setup/
              cwd: /
        besu-setup:
          files:
            /etc/besu/genesis.json:
              content: !Sub
                - |
                  ${genesisFile}
                - genesisFile:
                    !Ref GenesisFile
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/keys/key:
              content: !Sub
                - |
                  ${validator3PrivateKey}
                - validator3PrivateKey:
                    !Ref Validator3PrivateKey
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/keys/bootnode_key.pub:
              content: !Sub
                - |
                  ${bootnodePublicKey}
                - bootnodePublicKey:
                    !Ref BootnodeValidatorPublicKey
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/requirements.txt:
              content:
                !Sub |
                ansible==2.8.1
                boto3==1.9.178
                boto==2.49.0
                botocore==1.12.178
                jinja2==2.10.1
                pyyaml==5.1.1
                requests==2.22.0
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/requirements.yml:
              content:
                !Sub |
                ---
                - src: pegasyseng.hyperledger_besu
                - src: undergreen.prometheus-node-exporter
                - src: undergreen.prometheus-exporters-common
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/besu.yml:
              content: !Sub
                - |
                  ---
                  - hosts: localhost
                    connection: local
                    force_handlers: True

                    roles:
                      - role: pegasyseng.hyperledger_besu
                        vars:
                          besu_version: "${besuVersion}"
                          besu_network: ibft
                          besu_rpc_http_api: ["DEBUG","NET","WEB3","ETH","ADMIN","IBFT"]
                          besu_node_private_key_file: /etc/besu/keys/key
                          besu_genesis_path: /etc/besu/genesis.json
                          besu_bootnodes: ["enode://PARAM_BESU_BOOTNODE_PUBKEY@PARAM_BESU_BOOTNODE_IP:30303"]
                          besu_host_ip: PARAM_BESU_BOOTNODE_IP

                      # The undergreen.prometheus-exporters-common uses 'package' for some tasks which call 'yum' which is not available to the python3 runtime.
                      # This sets the interpreter to use python2.7 for this task to install dependencies and in turn the node exporter to get instance metrics
                      - role: undergreen.prometheus-node-exporter
                        vars:
                          ansible_python_interpreter: /usr/bin/python
                        become: yes

                - besuVersion:
                    !Ref BesuVersion
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/bootnode_ip.txt:
              content: !Sub
                - |
                  ${bootNodeIp}
                - bootNodeIp:
                    !GetAtt BootNode.PrivateIp
              owner: ec2-user
              group: ec2-user
              mode: '000644'
        bootstrap:
          commands:
            01_bootstrap-init:
              command: |
                #!/bin/bash
                # remove any chars at the end of the private key
                echo -ne `cat /home/ec2-user/setup/keys/key` > /etc/besu/keys/key
                BESU_BOOTNODE_PUBKEY=`cat /home/ec2-user/setup/keys/bootnode_key.pub`
                BESU_BOOTNODE_IP=`cat /home/ec2-user/setup/bootnode_ip.txt`
                BESU_NODE_IP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`
                sed -i "s/PARAM_BESU_NODE_IP/$BESU_NODE_IP/g" /home/ec2-user/setup/besu.yml
                sed -i "s/PARAM_BESU_BOOTNODE_IP/$BESU_BOOTNODE_IP/g" /home/ec2-user/setup/besu.yml
                sed -i "s/PARAM_BESU_BOOTNODE_PUBKEY/${BESU_BOOTNODE_PUBKEY//0x}/g" /home/ec2-user/setup/besu.yml
              cwd: /home/ec2-user/setup
    Properties:
      ImageId: !FindInMap [ AMIRegionMap, !Ref 'AWS::Region' , HVM64 ]
      KeyName: !Ref Ec2KeyPair
      InstanceType: !Ref BesuNodeInstanceType
      EbsOptimized: true
      SubnetId: !Ref SubnetOneId
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
        - !Ref EthSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: 100
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Validator3Node --configsets default --region ${AWS::Region}

          yum update -y --security --exclude=kernel*
          yum install -y docker wget curl ntp bind-utils iproute libselinux-python jq python3-pip python3-setuptools
          amazon-linux-extras install -y java-openjdk11

          cd /home/ec2-user/setup/
          python3 -m venv env
          source env/bin/activate
          python3 -m pip install --requirement requirements.txt
          ansible-galaxy install --force --role-file requirements.yml
          ansible-playbook -v besu.yml
          deactivate
          cd /home/ec2-user/
          echo "finished setting up besu validator3 ..."
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Validator3Node --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "besu-${AWS::StackName}-validator3"

  Validator4Node:
    Type: AWS::EC2::Instance
    DependsOn:
      - BootNode
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - cfn-hup
            - data-volume-init
            - besu-setup
            - bootstrap
        cfn-hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              group: root
              owner: root
              mode: "000400"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ConsulLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Validator4Node --region ${AWS::Region}
                runas=root
              group: root
              owner: root
              mode: "000400"
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
              group: root
              owner: root
              mode: "000400"
          commands:
            01_enable_cfn-hup:
              command: "systemctl enable cfn-hup.service"
            02_start_cfn-hup:
              command: "systemctl start cfn-hup.service"
        data-volume-init:
          commands:
            01_data-volume-filesystem:
              command: |
                #!/bin/bash
                device=$(lsblk | grep 100G | grep -o "^\w*\b")
                # check that it doesnt have a fs before wiping i.e if its healing and recovers with an existing volume leave it as is
                fs_check=$(file -s /dev/$device)
                if [[ $fs_check == *"ext4 filesystem"* ]]; then
                  echo "Existing filesystem... "
                else
                  echo "No filesystem found, creating one..."
                  mkfs.ext4 /dev/$device && e2fsck -f /dev/$device && resize2fs /dev/$device
                fi
                mkdir /data && chown -R ec2-user:ec2-user /data
                UUID=$(blkid /dev/$device | grep -oP '(UUID=).*(?=TYPE)' | sed -e 's/"//g')
                echo "$UUID      /data   ext4    defaults,nofail  0  2" >> /etc/fstab
                mount -a
                chown -R ec2-user:ec2-user /data && chmod -R 777 /data
                mkdir -p /etc/besu/keys/ /home/ec2-user/setup/
                chown -R ec2-user:ec2-user /data /etc/besu/keys/ /home/ec2-user/setup/
              cwd: /
        besu-setup:
          files:
            /etc/besu/genesis.json:
              content: !Sub
                - |
                  ${genesisFile}
                - genesisFile:
                    !Ref GenesisFile
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/keys/key:
              content: !Sub
                - |
                  ${validator4PrivateKey}
                - validator4PrivateKey:
                    !Ref Validator4PrivateKey
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/keys/bootnode_key.pub:
              content: !Sub
                - |
                  ${bootnodePublicKey}
                - bootnodePublicKey:
                    !Ref BootnodeValidatorPublicKey
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/requirements.txt:
              content:
                !Sub |
                ansible==2.8.1
                boto3==1.9.178
                boto==2.49.0
                botocore==1.12.178
                jinja2==2.10.1
                pyyaml==5.1.1
                requests==2.22.0
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/requirements.yml:
              content:
                !Sub |
                ---
                - src: pegasyseng.hyperledger_besu
                - src: undergreen.prometheus-node-exporter
                - src: undergreen.prometheus-exporters-common
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/besu.yml:
              content: !Sub
                - |
                  ---
                  - hosts: localhost
                    connection: local
                    force_handlers: True

                    roles:
                      - role: pegasyseng.hyperledger_besu
                        vars:
                          besu_version: "${besuVersion}"
                          besu_network: ibft
                          besu_rpc_http_api: ["DEBUG","NET","WEB3","ETH","ADMIN","IBFT"]
                          besu_node_private_key_file: /etc/besu/keys/key
                          besu_genesis_path: /etc/besu/genesis.json
                          besu_bootnodes: ["enode://PARAM_BESU_BOOTNODE_PUBKEY@PARAM_BESU_BOOTNODE_IP:30303"]
                          besu_host_ip: PARAM_BESU_BOOTNODE_IP

                      # The undergreen.prometheus-exporters-common uses 'package' for some tasks which call 'yum' which is not available to the python3 runtime.
                      # This sets the interpreter to use python2.7 for this task to install dependencies and in turn the node exporter to get instance metrics
                      - role: undergreen.prometheus-node-exporter
                        vars:
                          ansible_python_interpreter: /usr/bin/python
                        become: yes

                - besuVersion:
                    !Ref BesuVersion
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/bootnode_ip.txt:
              content: !Sub
                - |
                  ${bootNodeIp}
                - bootNodeIp:
                    !GetAtt BootNode.PrivateIp
              owner: ec2-user
              group: ec2-user
              mode: '000644'
        bootstrap:
          commands:
            01_bootstrap-init:
              command: |
                #!/bin/bash
                # remove any chars at the end of the private key
                echo -ne `cat /home/ec2-user/setup/keys/key` > /etc/besu/keys/key
                BESU_BOOTNODE_PUBKEY=`cat /home/ec2-user/setup/keys/bootnode_key.pub`
                BESU_BOOTNODE_IP=`cat /home/ec2-user/setup/bootnode_ip.txt`
                BESU_NODE_IP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`
                sed -i "s/PARAM_BESU_NODE_IP/$BESU_NODE_IP/g" /home/ec2-user/setup/besu.yml
                sed -i "s/PARAM_BESU_BOOTNODE_IP/$BESU_BOOTNODE_IP/g" /home/ec2-user/setup/besu.yml
                sed -i "s/PARAM_BESU_BOOTNODE_PUBKEY/${BESU_BOOTNODE_PUBKEY//0x}/g" /home/ec2-user/setup/besu.yml
              cwd: /home/ec2-user/setup
    Properties:
      ImageId: !FindInMap [ AMIRegionMap, !Ref 'AWS::Region' , HVM64 ]
      KeyName: !Ref Ec2KeyPair
      InstanceType: !Ref BesuNodeInstanceType
      EbsOptimized: true
      SubnetId: !Ref SubnetTwoId
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
        - !Ref EthSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: 100
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Validator4Node --configsets default --region ${AWS::Region}

          yum update -y --security --exclude=kernel*
          yum install -y docker wget curl ntp bind-utils iproute libselinux-python jq python3-pip python3-setuptools
          amazon-linux-extras install -y java-openjdk11

          cd /home/ec2-user/setup/
          python3 -m venv env
          source env/bin/activate
          python3 -m pip install --requirement requirements.txt
          ansible-galaxy install --force --role-file requirements.yml
          ansible-playbook -v besu.yml
          deactivate
          cd /home/ec2-user/
          echo "finished setting up besu validator4 ..."
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Validator4Node --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "besu-${AWS::StackName}-validator4"

  RpcNode:
    Type: AWS::EC2::Instance
    DependsOn:
      - BootNode
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - cfn-hup
            - data-volume-init
            - besu-setup
            - bootstrap
        cfn-hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              group: root
              owner: root
              mode: "000400"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ConsulLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource RpcNode --region ${AWS::Region}
                runas=root
              group: root
              owner: root
              mode: "000400"
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
              group: root
              owner: root
              mode: "000400"
          commands:
            01_enable_cfn-hup:
              command: "systemctl enable cfn-hup.service"
            02_start_cfn-hup:
              command: "systemctl start cfn-hup.service"
        data-volume-init:
          commands:
            01_data-volume-filesystem:
              command: |
                #!/bin/bash
                device=$(lsblk | grep 100G | grep -o "^\w*\b")
                # check that it doesnt have a fs before wiping i.e if its healing and recovers with an existing volume leave it as is
                fs_check=$(file -s /dev/$device)
                if [[ $fs_check == *"ext4 filesystem"* ]]; then
                  echo "Existing filesystem... "
                else
                  echo "No filesystem found, creating one..."
                  mkfs.ext4 /dev/$device && e2fsck -f /dev/$device && resize2fs /dev/$device
                fi
                mkdir /data && chown -R ec2-user:ec2-user /data
                UUID=$(blkid /dev/$device | grep -oP '(UUID=).*(?=TYPE)' | sed -e 's/"//g')
                echo "$UUID      /data   ext4    defaults,nofail  0  2" >> /etc/fstab
                mount -a
                chown -R ec2-user:ec2-user /data && chmod -R 777 /data
                mkdir -p /etc/besu/keys/ /home/ec2-user/setup/
                chown -R ec2-user:ec2-user /data /etc/besu/keys/ /home/ec2-user/setup/
              cwd: /
        besu-setup:
          files:
            /etc/besu/genesis.json:
              content: !Sub
                - |
                  ${genesisFile}
                - genesisFile:
                    !Ref GenesisFile
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/keys/bootnode_key.pub:
              content: !Sub
                - |
                  ${bootnodePublicKey}
                - bootnodePublicKey:
                    !Ref BootnodeValidatorPublicKey
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/requirements.txt:
              content:
                !Sub |
                ansible==2.8.1
                boto3==1.9.178
                boto==2.49.0
                botocore==1.12.178
                jinja2==2.10.1
                pyyaml==5.1.1
                requests==2.22.0
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/requirements.yml:
              content:
                !Sub |
                ---
                - src: pegasyseng.hyperledger_besu
                - src: undergreen.prometheus-node-exporter
                - src: undergreen.prometheus-exporters-common
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/besu.yml:
              content: !Sub
                - |
                  ---
                  - hosts: localhost
                    connection: local
                    force_handlers: True

                    roles:
                      - role: pegasyseng.hyperledger_besu
                        vars:
                          besu_version: "${besuVersion}"
                          besu_network: ibft
                          besu_rpc_http_api: ["DEBUG","NET","WEB3","ETH","ADMIN","IBFT"]
                          besu_genesis_path: /etc/besu/genesis.json
                          besu_bootnodes: ["enode://PARAM_BESU_BOOTNODE_PUBKEY@PARAM_BESU_BOOTNODE_IP:30303"]
                          besu_host_ip: PARAM_BESU_BOOTNODE_IP

                      # The undergreen.prometheus-exporters-common uses 'package' for some tasks which call 'yum' which is not available to the python3 runtime.
                      # This sets the interpreter to use python2.7 for this task to install dependencies and in turn the node exporter to get instance metrics
                      - role: undergreen.prometheus-node-exporter
                        vars:
                          ansible_python_interpreter: /usr/bin/python
                        become: yes

                - besuVersion:
                    !Ref BesuVersion
              owner: ec2-user
              group: ec2-user
              mode: '000644'
            /home/ec2-user/setup/bootnode_ip.txt:
              content: !Sub
                - |
                  ${bootNodeIp}
                - bootNodeIp:
                    !GetAtt BootNode.PrivateIp
              owner: ec2-user
              group: ec2-user
              mode: '000644'
        bootstrap:
          commands:
            01_bootstrap-init:
              command: |
                #!/bin/bash
                # remove any chars at the end of the private key
                BESU_BOOTNODE_PUBKEY=`cat /home/ec2-user/setup/keys/bootnode_key.pub`
                BESU_BOOTNODE_IP=`cat /home/ec2-user/setup/bootnode_ip.txt`
                BESU_NODE_IP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`
                sed -i "s/PARAM_BESU_NODE_IP/$BESU_NODE_IP/g" /home/ec2-user/setup/besu.yml
                sed -i "s/PARAM_BESU_BOOTNODE_IP/$BESU_BOOTNODE_IP/g" /home/ec2-user/setup/besu.yml
                sed -i "s/PARAM_BESU_BOOTNODE_PUBKEY/${BESU_BOOTNODE_PUBKEY//0x}/g" /home/ec2-user/setup/besu.yml
              cwd: /home/ec2-user/setup
    Properties:
      ImageId: !FindInMap [ AMIRegionMap, !Ref 'AWS::Region' , HVM64 ]
      KeyName: !Ref Ec2KeyPair
      InstanceType: !Ref BesuNodeInstanceType
      EbsOptimized: true
      SubnetId: !Ref SubnetTwoId
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
        - !Ref EthSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: 100
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource RpcNode --configsets default --region ${AWS::Region}

          yum update -y --security --exclude=kernel*
          yum install -y docker wget curl ntp bind-utils iproute libselinux-python jq python3-pip python3-setuptools
          amazon-linux-extras install -y java-openjdk11

          cd /home/ec2-user/setup/
          python3 -m venv env
          source env/bin/activate
          python3 -m pip install --requirement requirements.txt
          ansible-galaxy install --force --role-file requirements.yml
          ansible-playbook -v besu.yml
          deactivate
          cd /home/ec2-user/
          echo "finished setting up besu rpc node ..."
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource RpcNode --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "besu-${AWS::StackName}-rpcnode"


Outputs:
  BootNodeID:
    Description: The BootNode ID
    Value: !Ref BootNode

  BootNodePrivateIp:
    Description: The BootNode PrivateIp
    Value: !GetAtt BootNode.PrivateIp

  Validator2PrivateIp:
    Description: The Validator2 Node PrivateIp
    Value: !GetAtt Validator2Node.PrivateIp

  Validator3PrivateIp:
    Description: The Validator3 Node PrivateIp
    Value: !GetAtt Validator3Node.PrivateIp

  Validator4PrivateIp:
    Description: The Validator4 Node PrivateIp
    Value: !GetAtt Validator4Node.PrivateIp

  RpcPrivateIp:
    Description: The RPC Node PrivateIp
    Value: !GetAtt RpcNode.PrivateIp