---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Besu IBFT2 EKS & AWS Mananged Nodes Template"

Parameters:

  VpcId:
    Default: "vpc-"
    Description: The ID of your existing VPC that we will deploy into
    Type: "AWS::EC2::VPC::Id"

  PublicSubnetAId:
    Default: "subnet-"
    Description: The ID of the public subnet in AZ 1
    Type: String

  PublicSubnetBId:
    Default: "subnet-"
    Description: The ID of the public subnet in AZ 2
    Type: String

  PublicSubnetCId:
    Default: "subnet-"
    Description: The ID of the public subnet in AZ 3
    Type: String

  PrivateSubnetAId:
    Default: "subnet-"
    Description: The ID of the private subnet in AZ 1
    Type: String

  PrivateSubnetBId:
    Default: "subnet-"
    Description: The ID of the private subnet in AZ 2
    Type: String

  PrivateSubnetCId:
    Default: "subnet-"
    Description: The ID of the private subnet in AZ 3
    Type: String

  ClusterName:
    Default: besu
    Description: The name of the cluster
    Type: String

  NodeGroupName:
    Default: worker
    Description: The name of the nodegroup
    Type: String

  NodeAutoScalingMinSize:
    Default: 3
    Description: Minimum number of nodes
    Type: String

  NodeAutoScalingMaxSize:
    Default: 5
    Description: Maximum number of nodes
    Type: String

  NodeVolumeSize:
    Default: 100
    Description: Size of the volume on each node
    Type: String

  NodeInstanceType:
    AllowedValues:
      - t2.large
      - t2.xlarge
      - t3.large
      - t3.xlarge
      - r5.large
      - r5.xlarge
      - m5.large
      - m5.xlarge
    Default: t3.large
    Description: The EC2 instance type
    Type: String

  NodeKeyPair:
    Default: default-ssh-keypair
    Description: The ssh key pair to use with the EC2 nodes
    Type: String

  SSHCidrRange:
    Default: 0.0.0.0/0
    Description: The CIDR range or IP that is allowed to access the instances via ssh
    Type: String


Resources:

  ### ControlPlane / Cluster

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: cp communication with worker nodegroups
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-control-plane-sg"

  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: [eks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  ControlPlane:
    Type: AWS::EKS::Cluster
    DependsOn: EKSServiceRole
    Properties:
      Name: !Ref ClusterName
      Version: '1.14'
      RoleArn: !GetAtt EKSServiceRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref PublicSubnetAId
          - !Ref PublicSubnetBId
          - !Ref PublicSubnetCId
          - !Ref PrivateSubnetAId
          - !Ref PrivateSubnetBId
          - !Ref PrivateSubnetCId

  ### Nodegroup

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: node ssh sg
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: !Ref SSHCidrRange
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-node-sg-ssh"

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: ControlPlane
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: !Ref NodeGroupName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      DiskSize: !Ref NodeVolumeSize
      InstanceTypes:
        - !Ref NodeInstanceType
      ScalingConfig:
        MinSize: !Ref NodeAutoScalingMinSize
        DesiredSize: !Ref NodeAutoScalingMinSize
        MaxSize: !Ref NodeAutoScalingMaxSize
      RemoteAccess:
        Ec2SshKey: !Ref NodeKeyPair
        SourceSecurityGroups:
          - !Ref NodeSSHSecurityGroup
      Labels:
        cluster: !Ref ClusterName
        nodegroup: !Ref NodeGroupName
        Name: !Sub "${AWS::StackName}-${ClusterName}-${NodeGroupName}-node"
      Subnets:
        - !Ref PrivateSubnetAId
        - !Ref PrivateSubnetBId
        - !Ref PrivateSubnetCId

Outputs:

  ControlPlaneEndpoint:
    Value: !GetAtt ControlPlane.Endpoint
    Export:
      Name: !Sub "${AWS::StackName}-ControlPlaneEndpoint"

  NodeInstanceRole:
    Value: !GetAtt NodeInstanceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-NodeInstanceRole"
